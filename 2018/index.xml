<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018 - TLA+ Community Event on TLA+ Community Event &amp; Conference</title><link>http://conf.tlapl.us/2018/</link><description>Recent content in 2018 - TLA+ Community Event on TLA+ Community Event &amp; Conference</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://conf.tlapl.us/2018/index.xml" rel="self" type="application/rss+xml"/><item><title>Annie Liu</title><link>http://conf.tlapl.us/2018/liu2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/liu2018/</guid><description>Invariants in Distributed Algorithms Annie Liu, Scott D. Stoller, Saksham Chand, Xuetian Weng Computer Science Department, Stony Brook University We will discuss making invariants explicit in specification of distributed algorithms. Clearly this helps prove properties of distributed algorithms. More importantly, we show that this helps make it easier to express and to understand distributed algorithms at a high level, especially through direct uses of message histories. We will use example specifications in TLA+, for verification of Paxos using TLAPS, as well as complete executable specifications in DistAlgo, a high-level language for distributed algorithms.</description></item><item><title>Igor Konnov</title><link>http://conf.tlapl.us/2018/konnov2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/konnov2018/</guid><description>BMCMT: Bounded Model Checking of TLA+ Specifications with SMT Igor Konnov, Jure Kukovec, Thanh Hai Tran We present the development version of BMCMTâ€”a symbolic model checker for TLA+. It finds, whether a TLA+ specification satisfies an invariant candidate by checking satisfiability of an SMT formula that encodes: (1) an execution of bounded length, and (2) preservation of the invariant candidate in every state of the execution. Our tool is still in the experimental phase, due to a number of challenges posed by TLA+ semantics to SMT solvers.</description></item><item><title>Ioannis Filippidis</title><link>http://conf.tlapl.us/2018/filippidis2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/filippidis2018/</guid><description>Proving Properties of a Minimal Covering Algorithm Ioannis Filippidis, Richard M. Murray Control and Dynamical Systems, California Institute of Technology This work concerns the specification and proof using TLA+ of properties of an algorithm for solving the minimal covering problem, which we have implemented in Python. Minimal covering is the problem of choosing a minimal number of elements from a given set to cover all the elements from another given set, as defined by a given function.</description></item><item><title>Markus Kuppe</title><link>http://conf.tlapl.us/2018/kuppe2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/kuppe2018/</guid><description>State Space Explosion or: How To Fight An Uphill Battle Markus Kuppe Microsoft Research Clarke - the father of model checking - lists scaling up model checking as one of the challenges that require major breakthroughs in order to become sufficiently practical for widespread use in industry. While TLA+ adoption rate has been increasing in recent years and several industrial success stories praise TLA to be a useful addition to an engineer&amp;rsquo;s tool-belt, it is still a niche on a global scale.</description></item><item><title>Stefan Resch</title><link>http://conf.tlapl.us/2018/resch2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/resch2018/</guid><description>Applying TLA+ in a Safety-Critical Railway Project Stefan Resch Thales The presentation gives an overview on the experience and insights gained from using TLA+ and PlusCal to model and develop fault-tolerant and safety-critical modules for TAS Control Platform, a platform for railway control applications up to safety integrity level (SIL) 4. It is based on previously published work and extended with knowledge we gained in later development phases.
Thales Ground Transportation Systems has bundled the development and maintenance effort of fault-tolerant distributed computing systems in the TAS Control Platform for highly safety-critical applications.</description></item><item><title>Valentin Schneider</title><link>http://conf.tlapl.us/2018/schneider2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/schneider2018/</guid><description>Modeling Virtual Machines and Interrupts in TLA+ and PlusCal Valentin Schneider Arm Limited, UK The Arm [Generic Interrupt Controller](https://www.cl.cam.ac.uk/research/srg/han/ACS- P35/zynq/arm_gic_architecture_specification.pdf) (GIC) is a hardware component that manages the interrupts in a system. When there are pending interrupts (e.g. a network card has received a packet and raised an interrupt), it will signal them, which will lead to triggering a CPU exception. The GIC also provides interfaces (registers) to handle these interrupts, or even to generate new ones (software-generated interrupts).</description></item><item><title>William Schultz</title><link>http://conf.tlapl.us/2018/schultz2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/schultz2018/</guid><description>An Animation Module for TLA+ William Schultz TLA+ is an excellent tool for communicating how a system or algorithm works in a precise manner. Understanding a new TLA+ specification thoroughly, however, can be time consuming and require a certain amount of careful, focused study, depending on the complexity of the system being modeled. Visualizing the behaviors of a system can provide intuition about how a system works, and help provide insights on behaviors that may not be obvious or clear by examining a textual specification alone.</description></item></channel></rss>