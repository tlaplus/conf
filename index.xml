<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TLA+ Community Event &amp; Conference</title><link>http://conf.tlapl.us/</link><description>Recent content on TLA+ Community Event &amp; Conference</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://conf.tlapl.us/index.xml" rel="self" type="application/rss+xml"/><item><title>AndrewHelwer</title><link>http://conf.tlapl.us/2021/andrewhelwer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/andrewhelwer/</guid><description>Semantic highlighting in TLA+ Andrew Helwer Syntax highlighting uses text color and formatting to communicate useful information to users of a formal language; this is generally accomplished with regular expressions identifying keywords, literals, and common functions. There has been a recent trend toward using more powerful grammars that fully parse languages and expose complex semantic information in highlighting. This talk details the recent development of such a grammar for TLA+ using tree-sitter, an error-tolerant incremental parser generator.</description></item><item><title>Annie Liu</title><link>http://conf.tlapl.us/2018/liu2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/liu2018/</guid><description>Invariants in Distributed Algorithms Annie Liu, Scott D. Stoller, Saksham Chand, Xuetian Weng Computer Science Department, Stony Brook University We will discuss making invariants explicit in specification of distributed algorithms. Clearly this helps prove properties of distributed algorithms. More importantly, we show that this helps make it easier to express and to understand distributed algorithms at a high level, especially through direct uses of message histories. We will use example specifications in TLA+, for verification of Paxos using TLAPS, as well as complete executable specifications in DistAlgo, a high-level language for distributed algorithms.</description></item><item><title>DavidMcNeil</title><link>http://conf.tlapl.us/2019/davidmcneil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/davidmcneil/</guid><description>S-expressions for Actions with Logic Temporal David McNeil Viasat This talk will present the SALT tool which provides &amp;ldquo;S-expressions for Actions with Logic Temporal&amp;rdquo;. Specifically, SALT was designed and built with the goal of providing a one-to-one mapping from Clojure syntax to TLA+ syntax. This work was born out of practical experience in creating TLA+ models of communication protocols in the satellite communication industry. Software developers working on TLA+ in this domain learned to deeply appreciate the mathematical precision and conciseness of the TLA+ syntax as well as the capabilities of the TLA+ Toolbox for validating models.</description></item><item><title>HillelWayne</title><link>http://conf.tlapl.us/2019/hillelwayne/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/hillelwayne/</guid><description>On Advocacy and Instruction Hillel Wayne hillelwayne.com Why don’t people write specifications? Well, why should they? Programmers have no more reason to believe us than they do any of the 10,000 movements that promised to help and miserably failed. Many programmers believe two things about specification: it is hard, and it is useless. These are not myths we can undo overnight. But addressing them is profoundly important for convincing people to bother learning TLA+.</description></item><item><title>HillelWayne2021</title><link>http://conf.tlapl.us/2021/hillelwayne2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/hillelwayne2021/</guid><description>TLA+ Tiramisu Hillel Wayne There&amp;rsquo;s a gap between knowing how to write specifications and knowing how to write them well. Much of this gap is from the &amp;ldquo;small stuff&amp;rdquo;: all of the little tips, tricks, and traps that experts implicitly know but beginners rarely learn. Things like &amp;ldquo;the best way to represent nested state&amp;rdquo; or &amp;ldquo;how to debug a slow model.&amp;rdquo; This talk will be a general introduction to intermediate-level techniques.</description></item><item><title>Igor Konnov</title><link>http://conf.tlapl.us/2018/konnov2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/konnov2018/</guid><description>BMCMT: Bounded Model Checking of TLA+ Specifications with SMT Igor Konnov, Jure Kukovec, Thanh Hai Tran We present the development version of BMCMT—a symbolic model checker for TLA+. It finds, whether a TLA+ specification satisfies an invariant candidate by checking satisfiability of an SMT formula that encodes: (1) an execution of bounded length, and (2) preservation of the invariant candidate in every state of the execution. Our tool is still in the experimental phase, due to a number of challenges posed by TLA+ semantics to SMT solvers.</description></item><item><title>Ioannis Filippidis</title><link>http://conf.tlapl.us/2018/filippidis2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/filippidis2018/</guid><description>Proving Properties of a Minimal Covering Algorithm Ioannis Filippidis, Richard M. Murray Control and Dynamical Systems, California Institute of Technology This work concerns the specification and proof using TLA+ of properties of an algorithm for solving the minimal covering problem, which we have implemented in Python. Minimal covering is the problem of choosing a minimal number of elements from a given set to cover all the elements from another given set, as defined by a given function.</description></item><item><title>IvanBeschastnikh</title><link>http://conf.tlapl.us/2019/ivanbeschastnikh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/ivanbeschastnikh/</guid><description>Compiling Distributed System Models into Implementations with PGo Ivan Beschastnikh, Renato Costa, Matthew Do, Finn Hackett University of British Columbia, University of Waterloo Distributed systems are difficult to design and implement correctly. In response, both research and industry are exploring applications of formal methods to distributed systems. For example, Amazon has reported using TLA+ and PlusCal to verify its web services. A key challenge in this domain is the missing link between the formal design of a system and its implementation.</description></item><item><title>Jael Kriener</title><link>http://conf.tlapl.us/2014/kriener2014/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2014/kriener2014/</guid><description>The TLA+ Proof System Jael Kriener, Tomer Libal, Tom Rodeheffer TLAPS is an interactive proof environment for TLA+. Recent developments have focused on library modules, and on the addition of elementary temporal reasoning. The tutorial will present the current state of TLAPS and illustrate its use for verifying properties of TLA+ specifications.</description></item><item><title>JayParlar</title><link>http://conf.tlapl.us/2019/jayparlar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/jayparlar/</guid><description>Alloy for TLA+ Users Jay Parlar Okta Alloy (http://alloytools.org/) is a modelling language for software systems, out of MIT. Like TLA+, it comes bundled with an IDE and a model checker. Its mathematical foundation is also based on sets and predicate logic. Where Alloy differs from TLA+ is in its &amp;ldquo;visualizer&amp;rdquo;, its use of SAT solvers, and its focus on modelling relational data instead of concurrent systems. This talk provides a high level overview of Alloy for a typical TLA+ user, and show instances where one might choose Alloy over TLA+, and vice-versa, and more importantly, why it&amp;rsquo;s hugely valuable to know both systems.</description></item><item><title>JessySamy</title><link>http://conf.tlapl.us/2021/jessesamy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/jessesamy/</guid><description>Interactive TLA+ Jesse Davis &amp;amp; Samy Lanka Learning TLA+ is a challenge for industrial programmers, who are accustomed to exploring their code&amp;rsquo;s behavior with a debugger and print statements, more than reasoning about it like mathematicians. Subtle mistakes in a specification can lead to a trivially-true specification. As Leslie Lamport says, &amp;ldquo;Always be suspicious of success.&amp;rdquo; Specifiers can catch such mistakes by exploring the spec&amp;rsquo;s behavior interactively, and they can gain a more intuitive understanding of TLA+.</description></item><item><title>MarcBrooker</title><link>http://conf.tlapl.us/2022/marcbrooker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2022/marcbrooker/</guid><description>A decade of TLA+ at AWS Marc Brooker AWS Service teams at AWS have been using TLA+ for over a decade. In 2015, we wrote in Communications of the ACM about our experiences with TLA+ on S3, DynamoDB, and others. Since then, our use of formal methods has expanded substantially, with TLA+ playing a large, but increasingly niche, role. In this talk I’ll cover how we’re using TLA+ today, some of the ways our use of formal methods has evolved, and what we see as the challenges for the future.</description></item><item><title>Markus A. Kuppe</title><link>http://conf.tlapl.us/2014/kuppe2014/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2014/kuppe2014/</guid><description>Distributed TLC Markus A. Kuppe TLC is an explicit-state model checker for verifying safety and liveness properties of finite instances of TLA+ specifications. The tutorial will give a brief overview on TLC in general and then focus on recent extensions that support running TLC on a cluster of distributed computing nodes.</description></item><item><title>Markus Kuppe</title><link>http://conf.tlapl.us/2018/kuppe2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/kuppe2018/</guid><description>State Space Explosion or: How To Fight An Uphill Battle Markus Kuppe Microsoft Research Clarke - the father of model checking - lists scaling up model checking as one of the challenges that require major breakthroughs in order to become sufficiently practical for widespread use in industry. While TLA+ adoption rate has been increasing in recent years and several industrial success stories praise TLA to be a useful addition to an engineer&amp;rsquo;s tool-belt, it is still a niche on a global scale.</description></item><item><title>MikeLusignan</title><link>http://conf.tlapl.us/2021/mikelusignan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/mikelusignan/</guid><description>What can you do with a few days? Mike Lusignan Crowdstrike TLA+ is an indispensable tool for maintaining correctness in highly complex, concurrent environments. Why isn&amp;rsquo;t it used more in industry? One of the objections levied in general at formal methods is that they require a substantial investment in time, in opposition to other software development activities. Our experience at CrowdStrike is that this simply is not true.
In this talk, I&amp;rsquo;ll review past and ongoing experiences with TLA+ at CrowdStrike.</description></item><item><title>MuratDemirbas</title><link>http://conf.tlapl.us/2019/muratdemirbas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/muratdemirbas/</guid><description>High-level TLA+ specifications for the five consistency levels offered by Azure Cosmos DB Murat Demirbas Microsoft Customers of Azure Cosmos DB can associate any number of Azure regions (50+ at the time of writing) to their Cosmos database, at any time. The clients can read and write locally with any of the regions associated with the given Cosmos database. For the read operations, Cosmos DB allows developers to choose between five well-defined consistency models along the consistency spectrum – strong, bounded staleness, session, consistent prefix and eventual.</description></item><item><title>RussellMull</title><link>http://conf.tlapl.us/2019/russellmull/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/russellmull/</guid><description>Exposing Design Flaws in Shared-Clock Systems with TLA+ Russell Mull Auxon Many cyber-physical systems (e.g. Industrial Automation systems, Medical Devices, and Autonomous Vehicles) are designed with the presumption of a reliable shared clock. This is a very risky approach. Shared clocks can drift or even fail, leading to catastrophic results. I will present an approach to modeling shared-clock systems with TLA+ that can expose clock-based failure modes and drift envelopes, allowing the system designer to better understand the system&amp;rsquo;s failure boundaries.</description></item><item><title>Stefan Resch</title><link>http://conf.tlapl.us/2018/resch2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/resch2018/</guid><description>Applying TLA+ in a Safety-Critical Railway Project Stefan Resch Thales The presentation gives an overview on the experience and insights gained from using TLA+ and PlusCal to model and develop fault-tolerant and safety-critical modules for TAS Control Platform, a platform for railway control applications up to safety integrity level (SIL) 4. It is based on previously published work and extended with knowledge we gained in later development phases.
Thales Ground Transportation Systems has bundled the development and maintenance effort of fault-tolerant distributed computing systems in the TAS Control Platform for highly safety-critical applications.</description></item><item><title>Stephan Merz</title><link>http://conf.tlapl.us/2014/merz2014/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2014/merz2014/</guid><description>A Tutorial Introduction to TLA+ Stephan Merz TLA+ is a specification language that combines mathematical set theory for describing the static aspects of systems and the Temporal Logic of Actions for modeling the dynamic aspects. It is mainly intended for the specification of distributed and concurrent algorithms. This tutorial will give a hands-on introduction to the language and its tool support.</description></item><item><title>VaibhavSharma</title><link>http://conf.tlapl.us/2019/vaibhavsharma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/vaibhavsharma/</guid><description>Building Hyperscale IoT Services With TLA+ Vaibhav Sharma Microsoft Discover how Azure IoT adopted TLA+ to build distributed hyperscale services with high availability and desired consistency. It led to early detection of critical design flaws and resulted in massive reduction in post-production issues.</description></item><item><title>Valentin Schneider</title><link>http://conf.tlapl.us/2018/schneider2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/schneider2018/</guid><description>Modeling Virtual Machines and Interrupts in TLA+ and PlusCal Valentin Schneider Arm Limited, UK The Arm [Generic Interrupt Controller](https://www.cl.cam.ac.uk/research/srg/han/ACS- P35/zynq/arm_gic_architecture_specification.pdf) (GIC) is a hardware component that manages the interrupts in a system. When there are pending interrupts (e.g. a network card has received a packet and raised an interrupt), it will signal them, which will lead to triggering a CPU exception. The GIC also provides interfaces (registers) to handle these interrupts, or even to generate new ones (software-generated interrupts).</description></item><item><title>William Schultz</title><link>http://conf.tlapl.us/2018/schultz2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2018/schultz2018/</guid><description>An Animation Module for TLA+ William Schultz TLA+ is an excellent tool for communicating how a system or algorithm works in a precise manner. Understanding a new TLA+ specification thoroughly, however, can be time consuming and require a certain amount of careful, focused study, depending on the complexity of the system being modeled. Visualizing the behaviors of a system can provide intuition about how a system works, and help provide insights on behaviors that may not be obvious or clear by examining a textual specification alone.</description></item><item><title>WilliamSchultz</title><link>http://conf.tlapl.us/2019/williamschultz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/williamschultz/</guid><description>Fixing a MongoDB Replication Protocol Bug with TLA+ William Schultz MongoDB The MongoDB database replication protocol is heavily influenced by the Raft consensus algorithm, but it makes several design choices that diverge from Raft for the sake of performance and integration with the rest of the MongoDB database. Verifying the correctness of these design choices can be non-trivial. One subtle area of the protocol has to do with how operation log entries are determined to be durable after they are replicated to a set of nodes.</description></item><item><title>YannickWelsch</title><link>http://conf.tlapl.us/2019/yannickwelsch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2019/yannickwelsch/</guid><description>Using TLA+ for fun and profit in the development of Elasticsearch Yannick Welsch Elastic Elasticsearch is a distributed search and analytics engine based on Apache Lucene. Initially released in 2010, it has quickly become the most popular enterprise search engine, and is commonly used for log analytics, full-text search, operational and security intelligence, business analytics, and metrics use cases. Built as a distributed system since its inception, Elasticsearch effortlessly scales to clusters of hundreds of servers.</description></item><item><title/><link>http://conf.tlapl.us/2023/olivierconstant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2023/olivierconstant/</guid><description>Title Towards verifying algorithms for model-based engineering with TLA+
Abstract Systems engineering increasingly relies on modeling as the complexity of systems increases. Thales, for example, released in open source the Capella environment dedicated to Model-Based Systems Engineering. Plenty of modeling environments such as that one are built upon elaborate open-source technologies that rely on one core technology, EMF (Eclipse Modeling Framework) which became a de facto standard many years ago.</description></item></channel></rss>