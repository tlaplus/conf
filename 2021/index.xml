<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2021 - TLA+ Conf on TLA+ Community Event &amp; Conference</title><link>http://conf.tlapl.us/2021/</link><description>Recent content in 2021 - TLA+ Conf on TLA+ Community Event &amp; Conference</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://conf.tlapl.us/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>AndrewHelwer</title><link>http://conf.tlapl.us/2021/andrewhelwer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/andrewhelwer/</guid><description>Semantic highlighting in TLA+ Andrew Helwer Syntax highlighting uses text color and formatting to communicate useful information to users of a formal language; this is generally accomplished with regular expressions identifying keywords, literals, and common functions. There has been a recent trend toward using more powerful grammars that fully parse languages and expose complex semantic information in highlighting. This talk details the recent development of such a grammar for TLA+ using tree-sitter, an error-tolerant incremental parser generator.</description></item><item><title>HillelWayne2021</title><link>http://conf.tlapl.us/2021/hillelwayne2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/hillelwayne2021/</guid><description>TLA+ Tiramisu Hillel Wayne There&amp;rsquo;s a gap between knowing how to write specifications and knowing how to write them well. Much of this gap is from the &amp;ldquo;small stuff&amp;rdquo;: all of the little tips, tricks, and traps that experts implicitly know but beginners rarely learn. Things like &amp;ldquo;the best way to represent nested state&amp;rdquo; or &amp;ldquo;how to debug a slow model.&amp;rdquo; This talk will be a general introduction to intermediate-level techniques.</description></item><item><title>JessySamy</title><link>http://conf.tlapl.us/2021/jessesamy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/jessesamy/</guid><description>Interactive TLA+ Jesse Davis &amp;amp; Samy Lanka Learning TLA+ is a challenge for industrial programmers, who are accustomed to exploring their code&amp;rsquo;s behavior with a debugger and print statements, more than reasoning about it like mathematicians. Subtle mistakes in a specification can lead to a trivially-true specification. As Leslie Lamport says, &amp;ldquo;Always be suspicious of success.&amp;rdquo; Specifiers can catch such mistakes by exploring the spec&amp;rsquo;s behavior interactively, and they can gain a more intuitive understanding of TLA+.</description></item><item><title>MikeLusignan</title><link>http://conf.tlapl.us/2021/mikelusignan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://conf.tlapl.us/2021/mikelusignan/</guid><description>What can you do with a few days? Mike Lusignan Crowdstrike TLA+ is an indispensable tool for maintaining correctness in highly complex, concurrent environments. Why isn&amp;rsquo;t it used more in industry? One of the objections levied in general at formal methods is that they require a substantial investment in time, in opposition to other software development activities. Our experience at CrowdStrike is that this simply is not true.
In this talk, I&amp;rsquo;ll review past and ongoing experiences with TLA+ at CrowdStrike.</description></item></channel></rss>